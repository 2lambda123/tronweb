const {PRIVATE_KEY, FEE_LIMIT, ADDRESS_BASE58, ADDRESS_HEX, SIDE_CHAIN} = require('../util/config');
const shieldContract = require('../util/contracts').shieldContract;
const trc20Contract = require('../util/contracts').trc20Contract;
const assertThrow = require('../../helpers/assertThrow');
const tronWebBuilder = require('../util/tronWebBuilder');
const publicMethod = require('../util/PublicMethod');
const wait = require('../../helpers/wait');
const shieldedUtils = require('../util/shieldedUtils');
const {Z_TRON: zTronConfig} = require('../util/config');
const TronWeb = tronWebBuilder.TronWeb;
const chai = require('chai');
const util = require('util');
const assert = chai.assert;

//tronweb not supported any more.
describe('TronWeb ztron', function() {
    const tronWeb = tronWebBuilder.createInstance();
    let scalingFactor = 10;
    let trc20ContractAddress;
    let shieldedTRC20ContractAddress;
    // const {shieldedTRC20ContractAddress, trc20ContractAddress} = zTronConfig;
    const keysInfo = {};
    const narrowValue = 2;
    let realCost;
    let shieldedInfo;
    let shieldedInfo1;
    let shieldedInfo2;
    let newOtherAccountKey;
    let newOtherAddress;
    let ownerAddress;
    before(async function () {

        // newOtherAccount = await tronWeb.utils.accounts.generateAccount();
        // newOtherAccountKey = newOtherAccount.privateKey;
        newOtherAccountKey = "04E873F2920C6282FA70D0B5F485B7F456BBCD07771DD64FD46958B5A7C6DBA9";
        console.log("newOtherAccountKey:"+newOtherAccountKey)
        assert.equal(newOtherAccountKey.length, 64);
        newOtherAddress = tronWeb.address.fromPrivateKey(newOtherAccountKey);
        console.log("newOtherAddress:"+newOtherAddress)

        // ownerAddress
        ownerAddress = tronWeb.address.fromPrivateKey(PRIVATE_KEY);

        // deploy shieldedTRC20 contract
        console.log("000")
        trc20ContractAddress = "TEK8zvg9shh1AQ3VpDGjnK3nBZWEqPtihT";
        console.log("trc20ContractAddress:"+trc20ContractAddress)
        shieldedTRC20ContractAddress = "TH5cnDqDH46ajv3V3N94MQYjfVc9icRxPN";
        console.log("shieldedTRC20ContractAddress:"+shieldedTRC20ContractAddress)
    });

    describe('#create function', function() {
        describe("#createTransferParams 1V2", function (){
            it('should get transferParams with ask is object', async function (){
                const options = {
                    shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280ff5b51f48770518a92b5ae57269c33791ed1b83aaabb918fff56f0b2549b1900742dd5dabf202ff1774825bd7793a873f33fa24ffd05d784219169e8507f5e0400000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000001a9867a8d4f68636aba46d406b8ee0c9172b323e5774eebbd5c0d665badb5c6d7661f862e6e3753f9ee7e0f591ad9267629c91de85c4cf2d6692fb1740d524204512246c9e45ee6cbe94d1222f10f6a0e38701f25ca293adcf1f962afb688d084677fdeeb58d44072f195742c46e37afa3106d691a00f777fa66da894b7386bc380a5b780cd897ea54098de34adf279f7feda019a4da9ec157f55f930aea641af964c7418013dc6a3373f6dcf33f52ca1b8b973a8bb37bb244cc38f372c33af3c2d77afff69043a70540dfc59ba5bdba5d49bc44b47a5db970944b3d2655d1b64043536adfb70a216a3e8d9bf40ca0d4e7dfafedcc5ae295127ca276601a6032eb19cdec39c2855eda9382b8c3c776c58aa96e07f314b7afcd5f74e751d4033b30f38c8756ab3753bebee1e73744fe1e4c5f64848c49a1e0670ca10363aea0332000000000000000000000000000000000000000000000000000000000000000137be3b31b4b5f0fa8c31b484be340735aa0efc0bf6f1c259f38fcc77eb1e2481afbf93115d41118df2844c42a649e8075c7f62739314ab7412d0bb7ba11b770700000000000000000000000000000000000000000000000000000000000000028434a04a13160e9472817c32b554164b3854e6d5e67a7a78e97fdce9dd8e966a7a6b7ea27904407c2ff80b184be5aafa10db58bbdf7f0c6bf46323d762f27c643f51961704c0e5026ad726f630b83ee54754bb0dc2edbfb997dfff9d67f153da8760e00e004d0eee150ea6dc1336b0e0489987c5bddf5efdcb0f1755e9e73f3ade5776dba1d37af6f238416a9b6975548ae39d0b6a22c1db25887005cbf35f644bdd7abd3c6dd31e0d3a3560167033642c392edd3f90ba73098eb378116e647e18c863498cbdfd0d02b7fef489fe6f1eccef8aa7a9b8dbbe1cd7742753830d4be9b4187f3ac52d1f75f7ece111f7ead7b4bab8c617a6609f03aeee073f13fe4025cf9f144f00e01ee7b8f3877170d984877fc3c6a2990a71fb1c6d5d687a829672d8873aa5f413a07403a848ac0ad8faf6df5e1de4f62ccb0f0a4c058e5fe44aa1320daf13b67d8d4fa59c3080224950d12eef33f6c48f43c02dc5de779f921f863ac8f51bafc30d98264320418933f6d50bdda98305bd4985e85b2eba774f1cb623d421e74780274a72d37e22fc9615636faa307de51cacb520dab3b2b8c7fa85851ab93b7c0e1770f0276a862b208d909cbd8e1ddc6bdcd7bca240ab256dc1d2b96971264e86599f339d0776d27bf9ef9dbb9777f9b4f83b1fa0a22fa1658e0936bad1f4b6d6b57e722bd99bd1c777e57f24c9e66ed5235b17d0a7735cb3418567960f4b2805e933741fdd90651ff1899df1fed16d3b464e2e093f3dfde6759eb32d6c6743ec32d2a155aee05fc58c3c1fc04d617f0d6b0e92bbd31e8c0eac000000000000000000000000000000000000000000000000000000000000000227a17cd74948100cd7539a0ca17a7fb1ae952085e0ae5fe2349b7dc70c77e5ae3b529d924747671cbdb112a24f89d25869591472f67492c7ac1f41f338b681f730a709bf16c8fc151a5033206fa20c46cff636dacb40672604c7022d3849db12ec1a1c30446b3b0ace5819662ad4b8e2ecae6c74d0fadf359c12389da124a24866dd7b41844f9b2a37fd7200cbefe4d683842dcbe2bee51885126ec35a17b819e85c5fa0ecc24cae681d8a29856b40cee7fe9e4acca1a48c4936b358c37ff5b0d3f48853929f28dcd6d2dba931ddfd9e4b02ab503f5546ea3aef30653f24c37f3d508f4ab4bbcb1e0613535ad27794c2e5a4f80d996f0f30d7cef8d70bbe8f8df37d5612a7650ca85566e0d6c9c06bac78b2650f5a0ec3d1cdb99683c843a026a5f1bdcde19bdd89fcc1efb50d9a51c538f3413fce12627790832c87fcb99a0c1a4f6a57017ccc1f5600535fa74e7d8ba691fd9aaeb5d5388ae056537fe20af634d0a786ef04a0ca8b1e06b8138ac630660b90034f0ccef3608ada512b6506c8bf26f8b3ba35518378b1726cfa34b80971cb19d34585f98eeae521a25dc7fa52fe959b0f62b5f26afa6a8f45d2d7e08c3e2f20a60a22e21b817b4b9783a8c167e74398945c1a2a960a3bd40f3672e4dab9e5a13d631f8dd263f34471582d0709f7611751ab0603d54eca63c4d9ee767dcae33efbaf91eb31bf127b7ef4fddb40c1050dc1e9634ab38f5ea1ffae14c1a10157c61d16e29e2bccf571533b10181d1a09b3cb451c6d5586838b74db9dd77233cec2e3d713fd651f221691c66b51dc7007fa2510ff4878e1372cfc6a3faa9a0ca62167fed1506e231843e4c0fb4a0c631280a97b05f074e914897532e23d808bac506d006326f46b646c0d6d9fd316efeac2715456e37c2fa06f347526578fc8697963000000000000000000000000605950834814a2fc761ef98ad71d3429b5d4650375546e959e79c9f631d48e3394a081972482ef1228a4ed360bdb7cb862955b13b4c3df02d94ee20ecdf3c6fd5861f223029aa52a105dc103d460954fb3115334dd18f8138b14ec852e40b3b0941668901def21fe997f728a0d4da9edc93923d9e299448a3e639c79bf742604ffe81738fe3290e3db352f96924c54487c730b47d00c7e4d44c097062908d1f4f5ae9dbc308ce22770a1c92f95dfde169589c5996c8e234295cd77237af4e8ea7ad513a5e2c117336ba2c11c5db17688b084fa6317bebeb36ca031eeb85fded8d47f2fecaa5717cf1f51e6c6f77bc98eacd0380566e14f10f8e546d69d3c835d098652c9c4434df5af1b77456e30a4175dd27022fe3a6460f05ad2c555c421c6da7b88763e8c0011cb9757bcc53ea85bab98499d9415e06bb642b10b6dbcdcbc692909e3221f97a110bc1cbe80f76496ff52373f5501ab84038cec2b2b7821cf559ab10ea8737cb6662377aaeb1d5de4d9c23628b963f7bcb56c0421f1608e25a2bdcfe21d03db94a6fef193a1ddd696e72936736e2d6baa8437902d303828f51067836b7cab16cff77b6f686e96212c35cacdca1f951360b57e925c9b27489e6846ee7b5427880d4814dacc9e1b15b014f0bc26a721106f0e9df8678c3e32777cce3b9dca5123d46cd856ae0c402e8efebfec5bca590377811e8e8ce8e65084681f4a5578f7e9a5c19a1b02f912207003480fb8a98075274e3d7d3696dc784399583d11555b4a355e8e08f72fe7bf43d7f4cf4c50ef89f8ca42c6e921b9834eda0a5bd0ac08cb58a5c36459adef1e9f82f9cc25eac87c637b5a8177743854eb7cf4fe68577b436db9bab6a8ef479dc5b533050f3d62c3ff0b577a47e0f17f5ee2d092b31e981fc722b1e0ff23f9f485902d5acc000000000000000000000000",
                    feeLimit:FEE_LIMIT
                };
                console.log("options: "+util.inspect(options,true,null,true))
                const transactionResult = await shieldedUtils.makeAndSendTransaction(tronWeb, shieldedTRC20ContractAddress,
                    'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])', options, [], tronWeb.defaultAddress.base58);
                assert.ok(transactionResult && transactionResult.result);
                createTxId = transactionResult.transaction.txID;
                console.log("createTxId: "+createTxId)
                assert.equal(createTxId.length, 64);
                let createInfo;
                while (true) {
                    createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
                    if (Object.keys(createInfo).length === 0 ) {
                        await wait(3);
                        continue;
                    } else {
                        console.log("createInfo:"+util.inspect(createInfo))
                        break;
                    }
                }
                assert.equal(createInfo.receipt.result, "SUCCESS");
            })
        })

        describe("#createTransferParams 2V2", function (){
            it('should get transferParams with ask is object', async function (){
                const options = {
                    shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000400d768b08f913cdbe605d2299cb9c02cba03993e6a00ec3b047b6d0fb2f77c0087eb74cec7c8bce818de39b8159bef438175af965037c4906c68ec2d1a9ccce50d00000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000002edd3353fffff72158bdf3553283d21acc131718959e4bf77907d6dc950fd002f0c41d98a5bc4b1d14c9ef2280a7b6d2c0a6f2afaeb81a4532ab5cb7a60c8285c34ab4cc2131652cbe205bf761e71a57eee941dcb74b9c36353d60316a204b015b3ba5f832e0b90d4d7e4d8891a992705ba6ff8776615402d906d1d2ace21552b99fd65059b6748d054ea1731ebe62d876a1f73c3dc85c13f9f07ed5af2d0489e8538c181ea23d47a4842b62b8ba21ecb88c001ae2342279d22f76d5047addeb82a2b13744b9ed91364aca30bac50e46a82cb97e6c5c8d050a980a21a4a04f2ee02f4afe8894b19e9fa009b6b7dccc45997da0ad1f7b2f2a42790b09d544e94dc2a585465f2a97fb34e946c89cc2b16ffb28e5f083ad7fdd70d6491f3f389d28b1b77dc4f461daceaaa704cb430252de447b3c6a3bb96b753fa18580f16909448cc24fe6c3329d682047ff9928dfddfaf9546a72ec8d9c91751acf4ea47dcec7e0c41d98a5bc4b1d14c9ef2280a7b6d2c0a6f2afaeb81a4532ab5cb7a60c8285c117f42baa595cc47138e763b29201c1003283ee9ad66f66aa2335d444c921da3c20cc34b77c342b1f1912017d2a944c52e61cdc1b61a8a47e7c90410a3aedbeab85956456f77543f0b85a27b5f39267516474c708e533715177fa1a52f6bbe0f08362b5eae2e61c95efc4fa92de169de8487c251fb6d2428f5747ce141e0cb1cc610235a1ee0788018661ee5db037076cb1b96ec33bd8c9e8e3dbb066a0554ca0a75606e0952f8ce10d1cbf401c19723c467d11f0068b5b94947076600a34435f3f248c8fb9572f837db7f0e5bd423ebad20ab68be719f0ca95873c8da4014a424108954fe1f2bc99ff0b66c81f8b837bdc72a214b6d6655c31a4745206aea3000000000000000000000000000000000000000000000000000000000000000024e157134ce98a632118c3cd2073bf2d8c43851318de2344893935b9a85b4d97207e30ff2b940753b8689afa4e651082c25b7e210b342191d884d2c7373dd060a35ee03d9849f6aab4dfcbf9a16d46bd15d035b88f4da057cceb67c957e8382822a3c134ac505bf5e6a05a79766aac47deb61af95b9821da56466bc3c6760a800000000000000000000000000000000000000000000000000000000000000000228f9665c13fcaab118eb652dd9193fd6bb2d064e7621fc4eebb3c7869761630967321d390f6d919bfe5b4173840689f8597355998e9372940fd473a192d14118b7b8f6cc79d4f72082059af3172099aacd2782472f0038fe54178731d78847e382597f71db3fe68c3b4fef5f4683109066c3fef6cd018b1c194b231980f4bbdbe5b2e2b6ed8f742a6d8ce10ae5497d7a8c97e77b315601a0d3249d1fa88fb9c661581ef3d8cfabf8f1cb83d2e2676c571043c4036a5887fdbe88822cffba006c13ddaf9ac6a22fb0abfa1fe0a18ddcbbbbca0461892aff7e6ab27114c591a8eeed8663d56f60778848a908ca7bf103519189c1d9c9c16ac931339a310bf793dec0dbd5a9a92fe50e5abf2c6c883d2cf61379c8d9c2c61e48348ef236a8e5ab9c600fa2e5c85868b7124c3f2cca10bc91fce138ee337b473b166646f702afec29931a8278b8fb02a06d4133d59b230ccd6c09fc10fa5b0ba88e4e026946259834043c0efe3a114607b1a6823bb1bed6d78527299d198201abbfde9761155b5110b28613310e614a7b4bba0f8be6ad9d22c2eda30387b4e5b44ce0733997daf337e4c1df7e405039bde6b478942e87353984332195780cc16ff1f221078f9f22cefb6b7384a3239cba19de3ca8c7bc0268ce9bdd351073fadde0d081417e56d450025f6aed3c0fee7dade9e0d36916642bc879ca1ecc4a36fdfaf6c48fba979caa8febd9bbd8a8753106b8b6a62a4fffed806c78623f175d3408061edfbe4fc8369b85110ce74d093d75949920c00c0e05b9d2e1ffa4922e4cf3c6ce56a7567072000000000000000000000000000000000000000000000000000000000000000245aff12cb52e84c55033fddd118fb62ea28b37292f1a80aa2d5d301e367e5abc8ebc8f5a77433f9e7f3e811c3535ab66699802540d52dbefed30552b3cf7e65aeafb7708e9028e0fe7f18e44e4dda832228b41cee0833002a58e7fea2faf8f5aa6282a6c069a116cebc56517cf5f01ae691a258d458ee176cb323e2c4ec2ae88b23edea22a9ab5ce05094ff7a328bd16c9cca3d535c48e8163dc8af0974fd5ccacce27572a200c4692d7f69c9d923e3617e821794ce0e9bf19d33b87bc12acc0854affc800d8db2fa0d8ea8d9e953c1875475be53e442903435a57f0382ac00bc33e94c71311e16cafbf482423eb9b7a46bb233753e02fa8f6c5cd536a602f6efe8dddb62d8c4e103519e5417417cbd15f3b2a9f71d5b60fcd3fe5d6390056e04f3b258aedfc6928734c7506711d621af1f6de7cca29de28471f533747d43c99d788fba3ece4daffc6ba4d0c2c844d07d0f1940a50080d4da3e5d097552cb900a464cd87674eb8546ecd9aecfe92f1fb46e61c9cf9a3c7738c704008d688bb127549e82598c1dc7071a9dba1dfcccbd8ef2d629e4752460be7caa1059fc62f6fcea55b3ff5bc1222ca2eb0580ac8eabc1c1c0ede5818a954dcddc39be178de96d507e888cd7c5252fd4a36d1750e57dac325cbc0091b98b6650a68c85c2f4f7542c11577e885665499bfdb97d27e60d0c0b5179ca0c35c7f891c7740fbc9617c213c427777eb1e9e101ed80b284907d539c199c7d7a5f56b35ac4807c032e32e87038458aed3fe44ae207a0c67f9859aee6e0f51a53a6f77c3b4d4bffaa0eb8dadd3584fade59137e7d51f573227d729d4966f8b8091d8d832d8a9fc5bdeed881cfbe1c16fb4db68aee198cd5bac49c4b8173c210e2dfaac3839c33a54dd2a40c52145cd94578a962e6e427dc123ec0ecdbf6a95000000000000000000000000982c236155fb3659f809833058ede0a0b0b5c914e1bd5f21f68e0a113a7db7b5c9aa7de4d9c88c638b6310caede6daea97beee907540a7f4c63dc6874185de882bb81b8e7021fe55ae5b90b9362ba6405082913e1f66acd00bf0f57ae0430fcf45a6e6e3a6dbc0755645504421d96aaed4e476c115da2854ed1b873799edc3421459d336cd09cae32de0ee58d1ea60a186ec2360f9ea2af8c26eea823f763d8c1467fd210b269574cc88f6c048a5fbb781438d66c0c07173d5c0ff717ada62cc54615c42429b60792ffcdde38efc4ec6a2ae8814c7485d32d1d6fb13faea14bdd57776aae0e091f171524388fe178099fa8ee4621eccf1d24dad14327646d458b3c36d05df84051bf184a52fa10957d8861f9148fd4ef4addf95e875e24bc59085b9af49e8bee53b23804800c452d738e6c47661f08693ec56b37ae92c9dc60fbe964cea6209fd89869f558722d5283f68fa8c6a0174a15395f8204b57c6516f78d2b87d0b76056e2d0dc6d98634fcd097c9f074b68d852398bbe6305bb36f4aa7065f690a95175f14145519e35dbebf23bd08bad0a0eb1d6ab88c0245bf3c256c42ce06e60507e5aad04219ca91738b673d6937f5e9f52bd28e212ec477e7ab291f5dcedf0cd55f846133efd6db7acd6bbe5f68edaacc43f09b46eb7503f22f5f208497f912958c03edf28eb71c9c528843fef053ed4c1b1290daa2eae5f8cdde8fef2bc95d13bb57cc2078c8726c372b77e19a60ad715f0d41198998eb4e895421f4dcd942fc6e4048126170cc8334fa1ff2ee56afa9b14e8b48ce5ef151d6f9eea4a9b1f6204bc3df49cbfaa1e806b830ca5037134b5994678b3624072093733f57f369068b851ae455755396251d172e9ce85b2ffb1620ee7b401f88cf46af11fbb3910e6405a48d36bdfc9498e644cfaee6000000000000000000000000",
                    feeLimit:FEE_LIMIT
                };
                console.log("options: "+util.inspect(options,true,null,true))
                const transactionResult = await shieldedUtils.makeAndSendTransaction(tronWeb, shieldedTRC20ContractAddress,
                    'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])', options, [], tronWeb.defaultAddress.base58);
                assert.ok(transactionResult && transactionResult.result);
                createTxId = transactionResult.transaction.txID;
                console.log("createTxId: "+createTxId)
                assert.equal(createTxId.length, 64);
                let createInfo;
                while (true) {
                    createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
                    if (Object.keys(createInfo).length === 0 ) {
                        await wait(3);
                        continue;
                    } else {
                        console.log("createInfo:"+util.inspect(createInfo))
                        break;
                    }
                }
                assert.equal(createInfo.receipt.result, "SUCCESS");
            })
        })

        describe("#createTransferParams 2V1", function (){
            it('should get transferParams with ask is object', async function (){
                const options = {
                    shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000400f19eb943a808c8816a87cf69c6583a6aa1da1e04cad46393f0dcacd5a6ec71ed874823402193a25da55e8fe2b5aa49d7a7f805436b520614ed22a8cad1b8b8050000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000000295ea0da8aa32a2737b838ca98c585be6a98583b5ef3810087e39742890dc82ef03142cbfd23753a6fc278f3a98d2768fe2e03ef661d73c0b4972aeed257dd36f16671aeadf3103198f8f1e0aac8174ba1bec1172c332d005ad3f1993bed5ceac591fd66b982ce8094b6e7c09f9e10517fe3bbfe54a7947fbcbc2d3c5025a94328f87d20aa206154d931a48dca8a0d365da2d5ec85cdf5431fb3ba73707a83303c34273e55ad9114fd6172f31c3483a81a1411f080b4e8c07d9af5bad6635dc7980a23ef5b7fdd10deed8314daccd29ce3a95c5a62cffbc00525a8be215de4833118a76b3913ef363e4190482fc36129c940a4c561570c62c664f9f42c0360faaa53342ae0fc5af96dd124a26911d6845b12da9f181702610e24a4bbeab977b91da179fec5d6205ca891f0b13515c7bd346897e189ed56933939d7972945fba567ff23609ed73d0ffc04831a10cb74e0dececf97a10a3b3c712a8bba16dae484803142cbfd23753a6fc278f3a98d2768fe2e03ef661d73c0b4972aeed257dd36f4c76074db8729ec82abc194444a36b3b4b64ad3371448563f5352adcda057d016bf13705f9b1416bc657adae7631b10993475c7da16ab64c30ea88d7c04bdbe0a2de91b08a626f70bbe8cce07258cae52349cacf96aa31e1af1864a3babd6a2af8eebb1d5b945ef0583d1e26d68d4a80a2d321c124c9d33942a495465f011870036b424aff4dd4ed5afd5cd049c2a25c0d79034b91479720953d293808fbbd5413701ba4a00c4e13759dd0d4b1e4485e69fc4e524c7b977c3ba19b2073636d3fadca380c37e58abe1e12aea1f2edafeca97544d0877ba69df45599dbab836bae6c273580941ea1fcbe6225ce3d6373dd83d7fb779266ecfa1253de314056f9c40000000000000000000000000000000000000000000000000000000000000002a83f4fccdc611f2627a2fa6faba993581d9608364648a6c6577816db18afdeecca584ec887339b3d4e2cbb73e1084387a9689513e88507e05994f8b13526cf0bdf3b8d4945fea2174fa7d6d93d103f35f0b39c4820647c78a18687b69cc2926aafb468cb698484df35607b94fcf7bc1626660c2b54156babdcb145ab0a1596090000000000000000000000000000000000000000000000000000000000000001b8f6f57e29baefd36a6f8045eb9b6dcf30571e99038ede72a587ab2e97f6140141c49a0720d12e33c1a4c8b620e1f1cd4ba380a241e2f1227354b40a50692e905405ea9fcd4010340def036bcbab6c52cb9aa124ffe3c6f9aee0b92f4834e55090ce9f5d63f17da435c3d9c5a188ee8c06faa99894ca1e3e0f76b8ac57a6c299959a40d08a9ca63d2fca3ffaa3f521839867f3ac1fad64821a6ce468f90989cadbf384c175967210f6563dc57f8f014b74f0c948cc6b10baec4bf0cf9dc6759a0536d586c36d839114f837502850f8661b2087d5f47f1b5a3d8e617da40d0774a189f2fa0362ff4fa7730f177cac5d65b86de4ff722aa685f7595e7e548724be34f2e54bb723815793c6513d019bf765bf424ef46cb8df6748f226575596a9940000000000000000000000000000000000000000000000000000000000000001348516c10c58ee257d4f0c1cd398e21c65ab8df0f53b21081fe784d086f0ee18d53413284a80701557fdead3b8615c717ec41ef186e31788ec860d2fdfb45a88c3ba948a94054025e4dbacf52e75e977ea4fb859b1014f2f0e3fdd60c921078829085b3b0ed01990952d6b5e41d6bd2cf0c716b9a13e9997f0944114a0b9e6553869c77e344213f0d43eab7692b263bd8388e36cda582ad57999cf4653b1914f9739c68d55d5d0ba9f02fb2824d570397f68b5b695a6c5749f257f0864357631bd678a3d2cbd9b91af0dbca3c9a21411b66d7272c8e1a7c8940886c78be4b561de249d339a5585e3f4f0ef4a4d029a4658464dd1a003adb0545d0e8b3bb7e882fdf9d719c90adbc7c444b87ab70100690234d8d1cc9dfcdfb1212f94ffe3900dad92bf504b37fab55111c2b709dc99b381a6759fe30275b693d31c7049d0bd6227a36dd4cc390a75e3513fb432d4ec3315b8f9199c46185a4e8e03d83125b748afe6e149f22b7138dd4d59e79e6f74e9d6c5eb252cda22f2820f8b3db1088dd67acf378134b15a910d9cedc9b313cac62ce39a5469bd5daca8e31c825cf8c9cf9af5415b012da0298a706b402c2604aa2ad868e990ca4914664432db6fedf0daefd4b15c2a34636823a94b85dd412e1a1fe1093c8bc72f06af7c0d9de7ebbeaebb3cd53975e4ca08a25608d05f627898273bc23c88a245acf32622ad9cbd3f722fa3dc140ebe91e4a447fd178422f99a9683f006be8b3553ba97c619e5f36d05081f3bc7bf5a9c907c1f766436b8988d9fbf06c568a7dcfe940758fc32875a6c279cfa839d7d7cfe0d4fc954c55d59beebc81a4f44e00da35d1f7ae9417d2088e14565ff79f5bc8bba6911388e9e0315c2b01039df79a74ad80499daf03db611cad4588f8da95f5a2ce1809b82d6ea6482e5c2ff000000000000000000000000",
                    feeLimit:FEE_LIMIT
                };
                console.log("options: "+util.inspect(options,true,null,true))
                const transactionResult = await shieldedUtils.makeAndSendTransaction(tronWeb, shieldedTRC20ContractAddress,
                    'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])', options, [], tronWeb.defaultAddress.base58);
                assert.ok(transactionResult && transactionResult.result);
                createTxId = transactionResult.transaction.txID;
                console.log("createTxId: "+createTxId)
                assert.equal(createTxId.length, 64);
                let createInfo;
                while (true) {
                    createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
                    if (Object.keys(createInfo).length === 0 ) {
                        await wait(3);
                        continue;
                    } else {
                        console.log("createInfo:"+util.inspect(createInfo))
                        break;
                    }
                }
                assert.equal(createInfo.receipt.result, "SUCCESS");
            })
        })

        describe("#createTransferParamsWithoutAsk 1V2", function (){
            it('should get transferParams without ask, ak is an object', async function (){
                const options = {
                    shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280ccba01183463893cad36bf0db211807abf27a792e59eb0494323edeff35cc7ed5b33afe6a9b1e1322ffdb25f0bed20fd13e07a9396c7b972d830cd993988120600000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000001734c3b762039984e0c9e8e2f73207a3cb49a535460ff4ee3023c7d635264b9e09de53005207e530e2446f7c805d6ffbd10888a3e56dd6545218c7a83ae1ddc395eb288cb5ee88e6aeb49fc3444945f15185b1b9d81d20d929d9115dcbd30e78b3a50a44fd9c9178b78400b32ae3e48d93032e2bf4ed06b5e8f982bb9ee4fa03ca888a31970ac7e744a6b9ab30c44f279961842c193250c8d28440ecbef88c501bac67f77fc42a78f60905ec3a33aa334adefca24b6bedb6c6139875bb6b324ca67176fa2c4907d0eab52b1c7c895f7a6e2bbcc6771220a27c62d8ef24c8c8ffc02044fcdf817eacff2b373c2c14ced5ba636dbfc8862c586a2591f1550bba440b20755554581f30dcb84a8a3317e393d8b9d3fd929fe6474229eea16c2094e55af243a4a6d7a15b6a1dff6a73a23fd2daa8f78caf36f2db8d3d26d8af2049ca6000000000000000000000000000000000000000000000000000000000000000119a71b30afa5bfcd91f3441581b6450346d8f4c5cd58fc0178657eb5af1b8d84b89074f7f3fef5b5f6d3074cfa8dde813f24856a1f705a9c6e1ba54ce096d4030000000000000000000000000000000000000000000000000000000000000002a6dbeb5d4e1d7db0bc56100f602fbe5a35f7fcc0ffbf9d86701e8050cbfd433d97c956d032791960cd3c4cb366cd0e6285af7dc82a2180751f8862fed73999012df401d16baae17c90853ed0e238b41ef18169971ec24cfff91e0a1adac2e3c180d88fdf5e175b9e6d361d90168c07f0379e1758251f74192396a56187ebcd3f4772206c9cd9f913c7add05af846da22924fc9ec68b249cdadcbd72755bd1bf92695bd31dcfc767d87de5de0639725a3276160f0ed4c4733983566c86fbe7f77152f794943dee914a2f3105fdb3b821fe73426b227164aba82c4d5cf7657f1c97bb9b7eae0b7b9ec78e7c09d6ed93a7baa2a0a8c29265f04ae184173d9e74b7befeed5ca490f111b0571a0c4ff1acd26fc0192494513ea7fcd4b02f6618b8393eed26cacff8658848e49c247d58e7a5613163a8ddb40d60c1cb2e397ba5737151048f25c6c52d9f4c3015f1a2069d4779f0eb9b99d4ee706be3bb2fca26e028534c6b043cc19bee9226750fd4a50e7624bd67015bb3bd88528aeb3ed2827254e89a5c83f75babc0659f24c58ce21993c1764817286947a6102249604bbb6a0e0504c6a621a93e82db05574754e1d309b8a546c44259ae8c5d5fb631595e52555bfea5ae241e6cc4143bf0e284a84b742f8485c12be2573520491aa0b8a98fea01690261f30b2112b6cdd6c8b187b26ef278c3abc1b3a0290f0aeb35fbfb012ca4b17820cd081df72694ffe83d75ada9082c3be8f73e95cebc229636fadf8defc9110d0471f0ce0822037c090c9dc436b9a15cadc756aa60077ab969e2493914900000000000000000000000000000000000000000000000000000000000000026d0732bd1e726b8c821eaeb9d478f2e9910d4580b112cd2a022d84ce463fd04c614d1de793691f82907f3616e75920c5aec22c46b9b41eb63d7feeea4f84587f2f14c90b53c50cce6f7613b178b346cc6dce58dc5eeb6b9a8a5c836e9bb5fe8f33809f59c5a271f1718f27b30dd0b85397288b72b890e5279522841f3e9b01a48708cec359fb023983039ebdd118260652d5e57521d123c29216523da4d67c22b8196cc80ba5511406faa69e6656805890ca7f9cabc84167142307787c7273b93f243c5cb0a06a5954cf942fea45058b3b0d04995635f224ee096f882a9bf278123d7c843c5c826c746ecac9afbd75414c129d34189f78d3b709552e7f23bbd5e8a0fb1e90ab675795e324f68aacf408f460e1f2fc83eb599335d868451fcdbd0df74de371fcbdde22b0ae4b07bf0e1db355c1cc5419549003b7294344bd8d2846f90bac888455d5b61ee8db6a2bb67b3e6efcda461379aeb530080181f1997e317e779d351ca04bb0a299663c47ab3a9cb3d85409ccb7f7c1f08847ac87a92afa97b31a66036dc3186360c3d64cca3b37e7361c31abbb72121eee637201a04a6ade7b35004b28950c2f62bac6d81c8fa601bf82a2ff3eae549a0ddee221779ba34c18954dff718d096d53cd9251679ff6d7fd6a92ec5d01faf0c59f654bfac6c240ba480277620e8226a23d28e65bd2ed48dd18123f09ebb09604b38cd0f2001ce12b47e2e81ed3fc89520a246ea7ea3dfa6944c237382eef0a77fca71aa6e1e0fb4eb1deeb779e00838c1ff4cdfb778750de46a4f787c1061369179bd313d20239b82d049b638df76b373575561b0348c21e08c181243cc5a4a69fda3dd1c142aa4dc3dcca6256512b5006add7361e2bbd66e12c38f9b89d5e29a071453de47fa769ec94c956a0fdd7532f2b47dc4fccf4bb8a0000000000000000000000001b6a7d8dc22487d2a167ffb949c1a0c9e4c99279c62085d49181020b6d3cdd73bdfd07481db8942e8749ea4a60f421029d7f5ed54f6f580b590bfc3402ef8f2faca000b60e24fd4a06707972329cfa5caa07b894b84aa5f9b4caf08a8f699773602af136b808ecbbc09a9a2f0c36e17198806e087824260ae6927ad9efcf051decfea46d7a08b26ea36a086bad6d80993197b7840519f9eb9477db64a92eaa46c6b11f430241ff61e99b0e3549e88b82863d9b160aef09d5fd63348ac54d8bc47dd0f6297882341132c4729a1b667e9662c176df7b037ffd244f4599f15038e37258efee0ce0218489ef6701f50c0b7213675a43b0b97f2e53ddbca6bfc1afbf88ae9ca82951b36fc0bd3a40250309bd34b0bd1f7b30f0fa30df08aab06f45a5bc04f7817e03143a9718899fa81cfb6194375ae31f15293195b4a226f0938be82334f602abdaf0b5f56b933d90a1b67f85e59acf82dc4c3184b5fb8dfa9dd2f02f6f175a01ec1adba00a9732caee352f44ee567cf5ead49cce09aa2f3f2d490cc7d1e102b940dcbc2fd862903f0a63ae96dc27b8a714b68bcd4e4ac8be705af3045ca6b15c885f54c9c1df3f563394f4e7aaf42de8e903d3f92d8863f153633075ce6d9a569b9663ede9680bf69f1939c78008b87fce735eeffb6c4e8eb127f57af0bb73c8414e4bdc7e660d9bea97c2c6921c3bce815f6bff15e5e50c41eba04cc7c448672ebbfb31ad77625e41e796177d830d8098ffcd066e5c0455ac877ffbb9530800d83ee9a409e5cba91e361d48bad7657ae21f27b66c5ce45d01ed86ad19ce73b370addb75f5aa65e9bb0dae701c9c305344cbc8404a70d4924eb9807bf89ef9d8a5f0b5692879257926a7fb11b2d352201b4eb252872b95a08a188628f8a767f675b5403cee823162fd019a4fc00ed3000000000000000000000000",
                    feeLimit:FEE_LIMIT
                };
                const transactionResult = await shieldedUtils.makeAndSendTransaction(tronWeb, shieldedTRC20ContractAddress,
                    'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])', options, [], tronWeb.defaultAddress.base58);
                console.log("transactionResult: "+util.inspect(transactionResult));
                assert.ok(transactionResult);
                assert.ok(transactionResult.result);
                createTxId = transactionResult.transaction.txID;
                console.log("createTxId: "+createTxId)
                assert.equal(createTxId.length, 64);
                let createInfo;
                while (true) {
                    createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
                    if (Object.keys(createInfo).length === 0 ) {
                        await wait(3);
                        continue;
                    } else {
                        console.log("createInfo:"+util.inspect(createInfo))
                        break;
                    }
                }
                assert.equal(createInfo.receipt.result, "SUCCESS");
            })
        })

        describe("#createTransferParamsWithoutAsk 2V2", function (){
            it('should get transferParams without ask, ak is an object', async function (){
                const options = {
                    shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004004119335041270f465ee3810d1ee15904e2eb80e74c56ced383b329cba9d3ba2c226a61d691b52879967c0419233df740814f89bbfe0ec8c0ca0962d378fc6c060000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000000250edd62e492280fc79ec03c77afc7fff9afdd2da85cf5509ee7708d919913fdcf99325045272b7ea2734fee673b9522f5a385329df43fb234fa11dd01fd69906975c160ba8e5d06dbee1a5814553b233f435571093f83174adb613ca5ff8edb34d12819aefcb0b0b82ccbc5dfaef711abf73b71003fa7707ce6d05d9e7e0e836a7b84eadd83afefc1ed0a5d1fa924f74b1c6c570ba148687a2e64bcc6bb119157ac12b4f3f74fcae8fcd6cb9bfeb6f1fb908b5ed9ebb145db495ac7829be7c4e4dcf4c6748e1b88f06705ee98b933ab69dd8127c8e7d760a8d9e158daf59d55b154bfb65e9c9605a8b144734cc7236c7a25acde9d6b4554335cc5a078009faa0626c0c678d8e80b6645e2b2146cdd5d89703ccae802226a6ba087294e31bb132448dbfa420b0af61882e4014e76ce862933405313d388a332836c1c51bcb611d484a8ecb9ce37bc629cafebf669d45e16ce1af0b955478873916102f8a86b17ef99325045272b7ea2734fee673b9522f5a385329df43fb234fa11dd01fd6990606b3e04898d069a23f5ba480fbeac901ecde239623dfb441ed4cbb3585b153ce7dd181bfd908af73e19e2509ec2ebf2e8aed6f3802cf3d9a78d690d8c10ab9b3812b301713983228263a941f0b189d80f9cbaccc1a19fbcf3f54e8be50656efc0cb6b6f936970a4223a6e5b5c37407baaf38d7084d5be916f37c878a4ea1cab434d5c2b05340f5eab7e141a0665ed22636892aa89e0677e827cf7754b4857b3e1429d7f1bf5ff6389adbc7fed5b238ae861a8ebc686526e5d156138ad15956eb6dc4678bd99085866db23fd1d74de03284ae4d13ae381566d1ef9cab7af1bf0af9c45105bc98c0e0b762ae23e001a08f3e297f5351191d91d3ad188d2535a42b00000000000000000000000000000000000000000000000000000000000000025c7b992a2a453d67c43b6cd4d9e43c7058dc9e5dbfe77e6dca10f07aa7b198a797732f8bf9e58b982074feee8d322126cfe8fae043a856a7dd2b9a4360a1a507d64bd0520c3e20a277db4f454ba9f9d21224c8d04c43b732499847c80f76aa901ac558022c14d73d280f46175ed5f914fa03fc56361feb6a8b7d4e71c705460000000000000000000000000000000000000000000000000000000000000000027f3ebdd4e87a43d325d5e69322849aea780c5ef60918df0e9387d01948b8d81b4c54d77e6db4381e9ecf26db860eecf5edd78d75dcf8e8b63a66501c4c60fde61659ed608840076f7b8a878a2adb12e17e7a35fa23121ab8533b407590a6dd538526c534da4af7d957823d8e74157b5979db2d1e7b92aaf54f4e0b360bc40693e77abe2bb4cd45cff82f0f89dd27a5f9a9d2d1aa7d13838576a9d028f3df33d45f821c5455e52b75f3d9d9810e67892e96d63a69da465fcf4d6d716792a614060f717ef9823634f191f2887c8e83a965dd082ace9ac178a6f0bc30fbe7eeaf91d4ac35567231e078cdef9f45c0cce3c3b96af67fddf3a2ca00b1a62cc20ca2b22387750e86e9616ac36a21431894f97e9019ff5b40dbd2651f8dba0b8a15ad0e0c70083aba219754c85cd017097f13bd1b68676759684548fb62c22deaa6546a84caa57b3855c047b19ea7e9d5808e308d228c4b961fa98d5bea68f12e0ecf9f1226a9e649213e93ad847354917562eb35788cd547d96f9478e5e991168184989399e445cc0d4af54c4570ba60aa79ecbb966fb9137e79ddc53ede046331d4ae49120110615ac8b9ca03f3fce9e469b7b941ecbd01499883d2037607ba4bdd16ca050e67b5982e4e9f1caf7718fb9c44b99ffd5e2f9478caa252e9c1a95dd52109b3ba07071218783dacd69b4ba40b974907d8f4dd41402fca06363a30f4e567ba5be859e98f23ad36d163ba37b1951caa51696919f44d5e329a786a862706b94f81e35b0959a586d8863bcee623bd54919ee51be75bf4d4c484d550872b92ee0000000000000000000000000000000000000000000000000000000000000002921a62626d97bde2ceaa97fec5192cc58ace82ebba9b28664a1bda41d7a46f9a2ac731de3334fab86ef05ebd7b6809fdef76251a91004b36c870f8127088c5ece35143aed51380d19f9ec018f68fb52bd199a45207b1edea8d0b5c141da5fe1a60a8af0b6f9c47407b7d356eabdf64ba7214bae61dad418f452cc9986845dea575bf7c03109a148b564d9ac303bcb2f5d579e4528cf434118e976a57177cf4e7a6b44017a838fa927c898c90db8183f63c9f437decf760859acbc0601565e31b11437a5aaf2ba5c58a5783a4c2547a10e7a0b5a55a11515d0e6c4def4b7e438c0d465ce422c976a4a15d8318907241302257b471cb29208f7bb5df40d55462127d803e6798927047d30548144edafddc3949122f47c7498650d431ed3d3c09f489e38344702d452aa10fdd73628b4acac8c3a53c1e3abeee6074e4c9aa96ff2d3d1cf023ff6811c01345a49a9b231762cebc2bfc0c66e092505bced6a0f7571d9fdc62e696039bce6d84925bf2f00c799e18f5d979f792487275eb62657adc1d9eb135b67359efe14927576ec34a1a8f7cab6d60de8bf3d45feee256a6aef78d4699813b0c461765dd086036695385dd5934193913093e8e5f382fcd300c2c0e54d2da74c63d16990d3ab4cb3f2248c2594118e28f8cb02cef9c98c05750dc5cd641b91fc8a46349a65224259d09601f294b28de9dd7201a381d93b2d6579d889ccdb02c83d799c7651f7e922117c820cdca3dd7c82a9ed82eba49a565dce8a16fe1f3e881760f11372ca455a38acc12b7cd3cb4e61516ba4c3a0839277be946325e9f3a5036756b03201e13a172e653dcac408906d3f6d4a5bf41f02365e627d0782dc5e7ba2bc11bc9ec56437372c1eac0d8c9713e55f8e576525a00338cb2bebc94d5aeaa2892870ec8e3c12075123c1dc3d400000000000000000000000007dddff389a0a916b76559acd64bcc5e86cb33dbf23f23bd497a4b4d04bff3b0002b5cf8fd9612058a297b9fc7b14f9caa29dfad4baa6f8e1e1b5cc1a28653531fcd4f2d591bf9edc627faecda614ac81fc61f2b225c207ce6a618ff2ac54758007268716cc3845c08305f59e416de642069b44159db1c3716563bf8d155b93ce2014bea3d311451e5c77b93ac00ffad076f0a33567a65ebbeea6bbd93272689e88cc4e825034c284cedcd728959f479198fde1984586c9a7493bc1b9e24831a775ae9c26647084934330325c9ebad3bbec64d17b69c9ecb6c90ce3e142d3c0760f797509271e931d5a9acb5dc090c5c90995b881a7da0bcf60df8fcc048d0868587dc030c11f6d35653379544d325b41d3416ac935436fcb2b2c9a132cac08588a61869635c1cdfec5faf9811f69466a3d4158bc5e3f9e89903fc08b82dcf99e8338fe18019dfa6a14c45e6eda98ca1c06892d9e0b33fa3999160200355da03865e0d8b337c09593d3928c9ae0fb5b85f0069277361a0c9453a1c01847f314b113623d412a2d061e6598bbc396cf76cf7486a8122edea15d2b48856bd0d3d65142cba55a31d4baa342bc3d1bd44e1dcbaf0723b97b95c5d49813cf8d1357f0811f95f5a4f7047c54c1d548b17283308334e62bcf12479e5f436229f7fdf7d5d359a504b1cd6f445da3e25aef4a9b4e09f3ed79e8e5b07768b84e2b93c2deb0d0f97fa66c2ed77bad6ea49d800852c2d2f12dab8acc28eaa45e3980c21a1b1fd2b5bfe6b3f15880b50fa2ebcbd66c9c77f168891785dcfeb44fb83ee74c246562f27041a47c34aafd70d5f0c44a6414494e5317e76c7b129e2c57db99615b4a80aa83961faf595c03e4ace29dfde4ae43aec321ed18d96f86d1e312ffd9c60bba82aeaaa411961ee7d511ade7de0be057a9eb114000000000000000000000000",
                    feeLimit:FEE_LIMIT
                };
                const transactionResult = await shieldedUtils.makeAndSendTransaction(tronWeb, await tronWeb.address.toHex(shieldedTRC20ContractAddress),
                    'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])', options, [], tronWeb.defaultAddress.base58);
                console.log("transactionResult: "+util.inspect(transactionResult));
                assert.ok(transactionResult);
                assert.ok(transactionResult.result);
                createTxId = transactionResult.transaction.txID;
                console.log("createTxId: "+createTxId)
                assert.equal(createTxId.length, 64);
                let createInfo;
                while (true) {
                    createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
                    if (Object.keys(createInfo).length === 0 ) {
                        await wait(3);
                        continue;
                    } else {
                        console.log("createInfo:"+util.inspect(createInfo))
                        break;
                    }
                }
                assert.equal(createInfo.receipt.result, "SUCCESS");
            })
        })

        describe("#createTransferParamsWithoutAsk 2V1", function (){
            it('should get transferParams without ask, ak is an object', async function (){
                const options = {
                    shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000400b22deb2cb11b84e155a4dc5e46625b0c2463ffc39135c9652cfff595fc8c77475798cc3ce1d44f78a591f3644d6c109858c49952efc4dbd2f10e21a7dfe43d0c00000000000000000000000000000000000000000000000000000000000005400000000000000000000000000000000000000000000000000000000000000002198bf92ecd24172e500594c26160f520731ae6bdb3dfe80b82be33a00dd35c826b5f0c3d933a1ea8808a3e66d4e0fb7f6269d9a87ee89038f1f5680c14cf1306d5df9533f66b7947bb9eef09d0fd7d6d1eb475ec7ffd3cf0cf8cd0d42a2a652c9565cb1734bfde2e1e8f1dcfc1bdeba2a9d1b5bab52590084d512fcc3aca9903a3657727844df70856932eef26d511e3f9a5bca1abe967d3669a490c723280adeecc2056f1f4f90a6160e9a467f0fae8aa2c21937cd60d890f03e4458b9f9815c5ea87899b09f52f34153abf73dae38cd2b63a7974df2c2b4c47e5bc5a2f20710571d9e664a5cf04c7ada5b6bfce4cae805e078a6b4db154ea4dcae243578add32dd80f8645f907ac854923f722b85edadc03a106e676342695288e344d7d7f303c5b47c52c206f636581c104fcf74cbadc9843e39c7e7589b6603a297da61ae7f5866d867075f9c0498443b42ee25353702c1388630720b31a874eba7d8d5416b5f0c3d933a1ea8808a3e66d4e0fb7f6269d9a87ee89038f1f5680c14cf13067a23314a8972a5996f55e2ad9cb8bc0911f9ba2f5b30f9b753cb1d833c76eb9babed12e7155f4cb65797e5eb55e5f2a9006a1b157c10345183da5f2d85522d9aaf67e10188d4c50e228607a88f19ea1b15dd6b52267a6395161a4f5fee0ad1c8c8af991e2a2d5d8f65c7b78d482a86b0ad21ce0d743b06688e9b1870ff4b0822b053db2614f00c50d931b01480a2864af33f6896ed9e92af9d1412e9a29311781701c2cb41987e7d3ea9b636e153e6dc41d50f84038522a5a4fafc2f44b99d7782f46cdca45da11b6d698ba29290a20ab1726790e5b62955ebb7609cd767495447c63676a2b3379fca733eb56f0a2921e054e47b954d603e70d155efa13451e80000000000000000000000000000000000000000000000000000000000000002c635f040a2b5e0bc11ce5754acf7d4d071e15dda4e24807e2e1929905d208ec17c86b64524208a8a75ad28a690ba87d8dd0db5a981f42e211c5f72f729025b006632e01e31a60bc7b516b48ae1d9d3195d94f00e88df345904798a1a1503158b53c82aeb70e637cab301af4e2496889773a7d0319c68ba7b30df683ccc55c00500000000000000000000000000000000000000000000000000000000000000018b745b77767e5ea3c01f85ce1ed2d2d407fdd01bc86993048e1cd95c7aba13009e05457493d4b9a94933cc045e6adecdbb11a3d4d5d282512afe79c82e2fcd5e7b6c2778c0b4b0b953e42cec8273133ee05ba599d7bf0230b60e365a6498f1dc88f0a1487c7ea7f4f52bec736cf01251ac3e898a199c5b5cc97dd05158a10e10cdf99e625c61057310c38386d9d25f27955ed3ffcd637658e7639f4cc15f6d565f943dc6847524bedd9d87a7eff4debf08b608270ce01fd67bd9992ed978010f0884a0c69386e40fd6cfe9d87ab581aa7a4981ce40fa30fab3e6601ee8824f1d8fe6bc568a781609609086a72cd7035ea68be058bd75731e8a7d6eb7d82cd3e21d9f9664533f49fbc086ddb27d2ab12e6c7fa0dd735756751a357ed481fe0a950000000000000000000000000000000000000000000000000000000000000001a2e529649e60b8e15ffe6a60880061167ce5057ffdc9c23ac0e731a24a0331f23077419ce9df0941bc52284027e9074330bf65b3bd7737e71f4f7de1f97ea925f478cb297e3e94480c1304fd2c0895dba3ce84a58d2bd99079e7c970f50e33dd28e6204fc9329f33e0c7643f09f134408c6d0d43ea5e267357d9efa3d71e69e9b6b6278e745562430a99a54ee90d62c1a3a75d1dc6b71aadab0cf097e79c61609c5acc64d3e9ceef93d4763d3bf3bf73913cfe291230c26c6bcbb9e19af591805264176728b4a56acda0be5e2af0534eec2ab344cc07924160ffbf2fb927ee5b9648012fac1ee6299fd768e5714bfca40e1493ffc203d3a60fe27af939daf0e9f80f54291053840b747993e60d91f9990777b7918ccddc827e2b14a8f1c1292f2276559ce60111dd4ea7f6a7cf5f287e3db76a8218e3f52b0154b6c64debf6542943e0512f8eedf63cc67fcd4c8eb6622ff2e700c163c49f63f8f33ecacd8b9c3945b5074c9beb79d4e2561ed5bdad6d9b434a9175771b3d4f886d234d746d235d088ab4a372382227dfbd9e76b9efb4c060dbe14a93c4ff8289e989e42cc347ff1ccf614431576383acbdb3f94285b39452ff234d757bb057a080921c259ea2a1283e804e01551be565d529902b27f61d8e0d0b8bf1ae567f39313dea0a47c46aae9e14812f4a4784a89a7a9e72665368d07e61fed3cb819fbf13a578dcbdcfffcfc1b6d5ed3dafe16adeac25529e13399abc45d7e1d253d03c714e81508d827648c9a7242123f966987cc0e9984955620bc10f4949bb88d8a5984f135106e51b0162ffdeab2c67180f4f8236f676993dbbf31f2c79c018c23b10d8e8306aab1fa174ce4781c9bd0818135b7033d7e98088b3e9a7a4ac1bc354425d60e4d005628c3a22e8954e1b34679018555e74d7e7a9c04a000000000000000000000000",
                    feeLimit:FEE_LIMIT
                };
                const transactionResult = await shieldedUtils.makeAndSendTransaction(tronWeb, shieldedTRC20ContractAddress,
                    'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])', options, [], tronWeb.defaultAddress.base58);
                console.log("transactionResult: "+util.inspect(transactionResult));
                assert.ok(transactionResult);
                assert.ok(transactionResult.result);
                createTxId = transactionResult.transaction.txID;
                console.log("createTxId: "+createTxId)
                assert.equal(createTxId.length, 64);
                let createInfo;
                while (true) {
                    createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
                    if (Object.keys(createInfo).length === 0 ) {
                        await wait(3);
                        continue;
                    } else {
                        console.log("createInfo:"+util.inspect(createInfo))
                        break;
                    }
                }
                assert.equal(createInfo.receipt.result, "SUCCESS");
            })
        })

        describe("#createBurnParams 1V1T", function (){
            it('should get burnParams with ask is object', async function (){

                const options = {
                    shieldedParameter: "b118418a9f3245b8fe692fd8893740f6543d612eda801b03d2178dfe4efe9bff4aa9d422b178b14392475d2e4237a2d19ba60d88f93d53ff248bba7aa0260a160b676a90014023dd6a6ebf6c04ac4af01366d853270af6fc53298cae3898e0e8c75396197371570410e2c903d35019e71ac324d528fad0c1fa6530b77ff1fd939159a03c6a3596b67286838fcce0e94c70beaf8e3912dcdbd1dedefe02d106b851efd4f183ac401ae0d1d71dd5a5f8cca8eef7476c5988e2a6321709fef96750b81fe23eeb030f7e234cf070f1cd3fc9f4092c086aad27ff9efc31e4d3c6ed4404b6858cacc67361d88a2081009904dccdcb51010ad56f4bbac1cd5189756d0a7cb05a73c50a16db233e1aed9e0a28deaba83d81ee2e42e48c53ba53116f20337ea7ee358e79887e68c17c025e0052bb5f9be247fb57b3bc34f29e625cf5e1f4bfb684f6f186777d5109b6bbe7845491c2c8ae38dd65560b4430f8740eacd6a38473ea3960762ccb7d9e307ef3e59a0bee8891a2cf6a7850d563cbdc8e48af0500000000000000000000000000000000000000000000000000000000000000143655cdd7680805e1b432851ae1d77e4b4d667f91d1eeaddb41df859a20a34059a09da4a17331516207fa1323d83de897d0ed5347348974f4caca555e71c844070000000000000000000000415624c12e308b03a1a6b21d9b86e3942fac1ab92b3968ec1c2e7f416589784b5b54169c74889b4c6bf3161803fd540c5addc62f9d234af21c8ff13e9c77046f22d06825108aba4abc9e5daa1e179c0cd0357e007eedcdc55a23c7912c1cecdaec2850be7a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                    feeLimit:FEE_LIMIT
                }
                const transactionResult = await shieldedUtils.makeAndSendTransaction(tronWeb, await tronWeb.address.toHex(shieldedTRC20ContractAddress),
                    'burn(bytes32[10],bytes32[2],uint256,bytes32[2],address,bytes32[3],bytes32[9][],bytes32[21][])', options, [], tronWeb.defaultAddress.base58);
                console.log("transactionResult: "+util.inspect(transactionResult,true,null,true))
                assert.ok(transactionResult && transactionResult.result);
                createTxId = transactionResult.transaction.txID;
                console.log("createTxId: "+createTxId)
                assert.equal(createTxId.length, 64);
                let createInfo;
                while (true) {
                    createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
                    if (Object.keys(createInfo).length === 0 ) {
                        await wait(3);
                        continue;
                    } else {
                        console.log("createInfo:"+util.inspect(createInfo))
                        break;
                    }
                }
                assert.equal(createInfo.receipt.result, "SUCCESS");
            })
        })

        describe("#createBurnParamsWithoutAsk 1V1T", function (){
            describe('#createBurnParamsWithoutAsk', function (){
                it('should get burnParams without ask, ak is an object', async function (){
                    // makeAndSendTransaction
                    options = {
                        shieldedParameter: "ce4b0fc5f59e096f61e7f396c01e85b896742b89044f12a1a442be9074e25ee36cfe14da2931b83c0a32159c4bce8c3b579a7b23076c3cc2a855782c6869572c5c1ae3379e39c19a9f1471ab68e632d50b170517b8ac0c9eea19efcf88775f4f555ca5eb2b3a63036c1ddc1c0057837c6f2e83194722623fc9872a8c339ba882aeee0037c6723e624e0fa2d2a12cc88084c842e2f32741d1c5118a858116b358045eed92091dce7fa5450db9ca5967e6a28e7eb6104d924b201521fa32fb3c2b802b39d6c17d6ae063d79fa3bb86d7eedd140c62d7cb0be60f16d56b1d8cf53705e7618365b7167d087737cea842ad64f8dc4a4961051a21ac7b7914a58961658d504c6cbc253f18119b8527a92233a78020c7482224194ff1d6b764a98d845d560a33d91825bab92c689fb6d5ed0711c17e928dd72c8a8b540045077e36d48016e3bbe9ebc428a469bc478013e2866dee194e80d8a63360310d9c5dc581a38eab898e3b1f1d03d1d971f6cf1bdcd154a0a0675ca42512f2a1469b38366e750a000000000000000000000000000000000000000000000000000000000000001439e1a1a01ee84d8ec085fad2a5075d4361612f09aec28a4320b5e1303d79a1a088f4a3bd208e7043cbf44e27628654b8a957905ea467a7acd4c9b4b625b1400b0000000000000000000000415624c12e308b03a1a6b21d9b86e3942fac1ab92b1bcfd2e1122e5b5c4fb350e071617dd70417e884c2ff58ad021c191e118f6a7ce73745a3582f705d8b80af9b6d4df5c1a21730a86346067ce7aadf411ac9d9d58b47eb28dfdee691b2239b6acfb426e70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                        feeLimit:FEE_LIMIT
                    }
                    const transactionResult = await shieldedUtils.makeAndSendTransaction(tronWeb, await tronWeb.address.fromHex(shieldedTRC20ContractAddress),
                        'burn(bytes32[10],bytes32[2],uint256,bytes32[2],address,bytes32[3],bytes32[9][],bytes32[21][])', options, [], tronWeb.defaultAddress.base58);
                    console.log("transactionResult: "+util.inspect(transactionResult,true,null,true))
                    assert.ok(transactionResult && transactionResult.result);
                    createTxId = transactionResult.transaction.txID;
                    console.log("createTxId: "+createTxId)
                    assert.equal(createTxId.length, 64);
                    let createInfo;
                    while (true) {
                        createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
                        if (Object.keys(createInfo).length === 0 ) {
                            await wait(3);
                            continue;
                        } else {
                            console.log("createInfo:"+util.inspect(createInfo))
                            break;
                        }
                    }
                    assert.equal(createInfo.receipt.result, "SUCCESS");
                })
            })
        })
    });
});
